{
  "required": true,
  "minVersion": "0.8",
  "package": "me.fallenbreath.tmcexporter.mixins",
  "compatibilityLevel": "{{COMPATIBILITY_LEVEL}}",
  "mixins": [
    "access.ThreadedAnvilChunkStorageAccessor",
    "hook.MinecraftServerMixin",
    "metric.dimension.blockentity.ChunkAccessor",
    "metric.dimension.blockentity.WorldAccessor",
    "metric.dimension.blockevent.ServerWorldMixin",
    "metric.dimension.chunk.ThreadedAnvilChunkStorageMixin",
    "metric.dimension.entity.ServerEntityManagerAccessor",
    "metric.dimension.entity.ServerEntityManagerListenerMixin",
    "metric.dimension.entity.ServerEntityManagerMixin",
    "metric.dimension.entity.ServerWorldAccessor",
    "metric.dimension.tiletick.ChunkTickSchedulerAccessor",
    "metric.dimension.tiletick.ServerTickSchedulerMixin",
    "metric.dimension.tiletick.ServerWorldMixin",
    "metric.dimension.tiletick.WorldTickSchedulerAccessor",
    "metric.dimension.timecost.ServerChunkManagerMixin",
    "metric.dimension.timecost.ServerWorldMixin",
    "metric.dimension.timecost.SpawnHelperMixin",
    "metric.mod.fabriccarpet.HopperCounterMixin",
    "metric.server.network.ClientConnectionMixin",
    "metric.server.network.ServerNetworkIoMixin",
    "metric.server.network.inbound.DecoderHandlerMixin",
    "metric.server.network.inbound.PacketInflaterMixin",
    "metric.server.network.inbound.SplitterHandlerMixin",
    "metric.server.network.outbound.EncoderHandlerMixin",
    "metric.server.network.outbound.PacketDeflaterMixin",
    "metric.server.network.outbound.SizePrependerMixin",
    "metric.server.tick.MinecraftServerMixin",
    "metric.server.timecost.CommandFunctionManagerMixin",
    "metric.server.timecost.MinecraftDedicatedServerMixin",
    "metric.server.timecost.MinecraftServerMixin",
    "metric.server.timecost.ServerNetworkIoMixin",
    "network.PacketCodecDispatcherAccessor",
    "network.ServerNetworkIoChannelInitializerAccessor",
    "network.ServerNetworkIoMixin",
    "utils.DirectBlockEntityTickInvokerAccessor",
    "utils.WrappedBlockEntityTickInvokerAccessor"
  ],
  "client": [
  ],
  "injectors": {
    "defaultRequire": 1
  }
}
